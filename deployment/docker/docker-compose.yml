version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: inventory-postgres
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: inventory-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: inventory-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: inventory-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB for metrics
  influxdb:
    image: influxdb:2.7-alpine
    container_name: inventory-influxdb
    ports:
      - "8086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: password123
      DOCKER_INFLUXDB_INIT_ORG: enterprise
      DOCKER_INFLUXDB_INIT_BUCKET: inventory-metrics
    volumes:
      - influxdb_data:/var/lib/influxdb2

  # Inventory Service
  inventory-service:
    build:
      context: ../
      dockerfile: inventory-service/Dockerfile
    container_name: inventory-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: inventory_db
      DB_USERNAME: inventory_user
      DB_PASSWORD: inventory_pass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:29092
      DYNATRACE_URL: ${DYNATRACE_URL:-}
      DYNATRACE_API_TOKEN: ${DYNATRACE_API_TOKEN:-}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Store Service
  store-service:
    build:
      context: ../
      dockerfile: store-service/Dockerfile
    container_name: store-service
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      SERVER_PORT: 8081

  # Notification Service
  notification-service:
    build:
      context: ../
      dockerfile: notification-service/Dockerfile
    container_name: notification-service
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KAFKA_BROKERS: kafka:29092
      REDIS_HOST: redis
      SERVER_PORT: 8082

  # API Gateway
  api-gateway:
    build:
      context: ../
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    depends_on:
      - inventory-service
      - store-service
      - notification-service
    ports:
      - "8000:8000"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      INVENTORY_SERVICE_URL: http://inventory-service:8080
      STORE_SERVICE_URL: http://store-service:8081
      NOTIFICATION_SERVICE_URL: http://notification-service:8082
      SERVER_PORT: 8000

volumes:
  postgres_data:
  redis_data:
  influxdb_data:

networks:
  default:
    name: inventory-network
