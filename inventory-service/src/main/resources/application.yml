spring:
  application:
    name: inventory-service

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:inventory_db}
    username: ${DB_USERNAME:inventory_user}
    password: ${DB_PASSWORD:inventory_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 50
      minimum-idle: 10
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000

  jpa:
    hibernate:
      ddl-auto: validate  # Mudando para validate pois o Flyway vai gerenciar o schema
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 25
          order_inserts: true
          order_updates: true
    show-sql: false

  # Flyway Configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
    baseline-version: 0
    locations: classpath:db/migration
    sql-migration-suffixes: .sql
    placeholders:
      application.name: inventory-service
    validate-on-migrate: true
    clean-disabled: true  # Segurança: não permite limpar o banco em produção

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    jedis:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 5
        max-wait: -1ms

  kafka:
    bootstrap-servers: ${KAFKA_BROKERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 1
    consumer:
      group-id: inventory-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: earliest

# Dynatrace Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      dynatrace:
        uri: ${DYNATRACE_URL:}
        api-token: ${DYNATRACE_API_TOKEN:}
        device-id: ${DYNATRACE_DEVICE_ID:inventory-service}
        v2:
          metric-key-prefix: inventory.service
    distribution:
      percentiles-histogram:
        http.server.requests: true
        inventory.stock.reservation.time: true
        inventory.sync.time: true

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      stock-reservation:
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 3
      stock-commit:
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 3

  retry:
    instances:
      stock-reservation:
        maxAttempts: 3
        waitDuration: 500ms
        retryExceptions:
          - java.sql.SQLException
          - org.springframework.dao.DataAccessException
      stock-commit:
        maxAttempts: 3
        waitDuration: 500ms
        retryExceptions:
          - java.sql.SQLException
          - org.springframework.dao.DataAccessException

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  compression:
    enabled: true
  http2:
    enabled: true

# Logging Configuration
logging:
  level:
    com.enterprise.inventory: INFO
    org.springframework.kafka: WARN
    org.hibernate.SQL: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

---
spring:
  config:
    activate:
      on-profile: prod

  datasource:
    hikari:
      maximum-pool-size: 100
      minimum-idle: 20

  redis:
    jedis:
      pool:
        max-active: 50
        max-idle: 20
        min-idle: 10

# Production logging
logging:
  level:
    com.enterprise.inventory: WARN
    org.hibernate.SQL: WARN
    root: WARN
