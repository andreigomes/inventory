spring:
  application:
    name: api-gateway

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

  cloud:
    gateway:
      # Global CORS configuration
      globalcors:
        cors-configurations:
          '[/**]':
            allowed-origins: "*"
            allowed-methods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowed-headers: "*"
            allow-credentials: false
            max-age: 3600

      # Circuit breaker configuration
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin

      # Route discovery
      discovery:
        locator:
          enabled: false

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 5

# Service URLs
services:
  inventory:
    url: ${INVENTORY_SERVICE_URL:http://localhost:8080}
  store:
    url: ${STORE_SERVICE_URL:http://localhost:8081}
  notification:
    url: ${NOTIFICATION_SERVICE_URL:http://localhost:8082}

# Server Configuration
server:
  port: ${SERVER_PORT:8000}
  compression:
    enabled: true
  http2:
    enabled: true

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      inventory-service-cb:
        slidingWindowSize: 20
        minimumNumberOfCalls: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 5
        registerHealthIndicator: true
      store-service-cb:
        slidingWindowSize: 20
        minimumNumberOfCalls: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 5
        registerHealthIndicator: true
      notification-service-cb:
        slidingWindowSize: 20
        minimumNumberOfCalls: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 5
        registerHealthIndicator: true

  timelimiter:
    instances:
      inventory-service-cb:
        timeoutDuration: 10s
      store-service-cb:
        timeoutDuration: 10s
      notification-service-cb:
        timeoutDuration: 10s

# Management & Observability
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,gateway,prometheus
  endpoint:
    health:
      show-details: always
    gateway:
      enabled: true
  metrics:
    export:
      dynatrace:
        uri: ${DYNATRACE_URL:}
        api-token: ${DYNATRACE_API_TOKEN:}
        device-id: ${DYNATRACE_DEVICE_ID:api-gateway}
        v2:
          metric-key-prefix: gateway
    distribution:
      percentiles-histogram:
        http.server.requests: true
        gateway.request.duration: true
    tags:
      service: api-gateway
      environment: ${SPRING_PROFILES_ACTIVE:dev}

# Logging Configuration
logging:
  level:
    com.enterprise.gateway: INFO
    org.springframework.cloud.gateway: DEBUG
    org.springframework.cloud.gateway.filter.ratelimit: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} [%X{traceId:-},%X{spanId:-}] - %msg%n"

---
spring:
  config:
    activate:
      on-profile: docker

services:
  inventory:
    url: http://inventory-service:8080
  store:
    url: http://store-service:8081
  notification:
    url: http://notification-service:8082

redis:
  host: redis
  port: 6379

---
spring:
  config:
    activate:
      on-profile: prod

# Production optimizations
server:
  compression:
    enabled: true
    min-response-size: 1024
  http2:
    enabled: true

logging:
  level:
    com.enterprise.gateway: WARN
    org.springframework.cloud.gateway: WARN
    root: WARN
